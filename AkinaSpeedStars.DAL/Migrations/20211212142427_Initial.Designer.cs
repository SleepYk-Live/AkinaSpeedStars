// <auto-generated />
using System;
using AkinaSpeedStars.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using AppContext = AkinaSpeedStars.DAL.Data.AppContext;

#nullable disable

namespace AkinaSpeedStars.DAL.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20211212142427_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.Kit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdditionalDestination")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Destination")
                        .HasColumnType("int");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GearShiftType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsATM")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDriverPositionLeft")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfDoors")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Kits");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.ModelCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ProductionStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("ModelCodes");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.Part", b =>
                {
                    b.Property<long>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Code"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProductionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ProductionStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.PartGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartGroups");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.PartSubgroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartGroupId");

                    b.ToTable("PartSubgroups");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.PartTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartTrees");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.Scheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartSubgroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartSubgroupId");

                    b.ToTable("Schemes");
                });

            modelBuilder.Entity("KitModelCode", b =>
                {
                    b.Property<int>("CodesId")
                        .HasColumnType("int");

                    b.Property<int>("KitsId")
                        .HasColumnType("int");

                    b.HasKey("CodesId", "KitsId");

                    b.HasIndex("KitsId");

                    b.ToTable("KitModelCode");
                });

            modelBuilder.Entity("KitPartGroup", b =>
                {
                    b.Property<int>("KitsId")
                        .HasColumnType("int");

                    b.Property<int>("PartGroupsId")
                        .HasColumnType("int");

                    b.HasKey("KitsId", "PartGroupsId");

                    b.HasIndex("PartGroupsId");

                    b.ToTable("KitPartGroup");
                });

            modelBuilder.Entity("PartPartTree", b =>
                {
                    b.Property<int>("PartTreesId")
                        .HasColumnType("int");

                    b.Property<long>("PartsCode")
                        .HasColumnType("bigint");

                    b.HasKey("PartTreesId", "PartsCode");

                    b.HasIndex("PartsCode");

                    b.ToTable("PartPartTree");
                });

            modelBuilder.Entity("PartTreeScheme", b =>
                {
                    b.Property<int>("PartTreesId")
                        .HasColumnType("int");

                    b.Property<int>("SchemesId")
                        .HasColumnType("int");

                    b.HasKey("PartTreesId", "SchemesId");

                    b.HasIndex("SchemesId");

                    b.ToTable("PartTreeScheme");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.ModelCode", b =>
                {
                    b.HasOne("AkinaSpeedStars.DAL.Entities.Car", "Car")
                        .WithMany("ModelCodes")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.PartSubgroup", b =>
                {
                    b.HasOne("AkinaSpeedStars.DAL.Entities.PartGroup", "PartGroup")
                        .WithMany("Subgroups")
                        .HasForeignKey("PartGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartGroup");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.Scheme", b =>
                {
                    b.HasOne("AkinaSpeedStars.DAL.Entities.PartSubgroup", "PartSubgroup")
                        .WithMany("Schemes")
                        .HasForeignKey("PartSubgroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartSubgroup");
                });

            modelBuilder.Entity("KitModelCode", b =>
                {
                    b.HasOne("AkinaSpeedStars.DAL.Entities.ModelCode", null)
                        .WithMany()
                        .HasForeignKey("CodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkinaSpeedStars.DAL.Entities.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KitPartGroup", b =>
                {
                    b.HasOne("AkinaSpeedStars.DAL.Entities.Kit", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkinaSpeedStars.DAL.Entities.PartGroup", null)
                        .WithMany()
                        .HasForeignKey("PartGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartPartTree", b =>
                {
                    b.HasOne("AkinaSpeedStars.DAL.Entities.PartTree", null)
                        .WithMany()
                        .HasForeignKey("PartTreesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkinaSpeedStars.DAL.Entities.Part", null)
                        .WithMany()
                        .HasForeignKey("PartsCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartTreeScheme", b =>
                {
                    b.HasOne("AkinaSpeedStars.DAL.Entities.PartTree", null)
                        .WithMany()
                        .HasForeignKey("PartTreesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkinaSpeedStars.DAL.Entities.Scheme", null)
                        .WithMany()
                        .HasForeignKey("SchemesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.Car", b =>
                {
                    b.Navigation("ModelCodes");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.PartGroup", b =>
                {
                    b.Navigation("Subgroups");
                });

            modelBuilder.Entity("AkinaSpeedStars.DAL.Entities.PartSubgroup", b =>
                {
                    b.Navigation("Schemes");
                });
#pragma warning restore 612, 618
        }
    }
}
